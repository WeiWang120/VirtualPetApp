//
//  MessagesViewController.swift
//  PetIMessage
//
//  Created by 王巍 on 3/25/17.
//  Copyright © 2017 王巍. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    func sendPetImage(pet:String){
        //set the template layout
        let layout = MSMessageTemplateLayout()
        //add image to the layout
        layout.image = UIImage(named: "\(pet)@3x.png")
        let message = MSMessage()
        //add this layout to message
        message.layout = layout
        //insert this message
        self.activeConversation?.insert(message, completionHandler: nil)
        
    }
    
    @IBAction func birdPressed(_ sender: Any) {
        sendPetImage(pet: "bird")
    }
    @IBAction func bunnyPressed(_ sender: Any) {
        sendPetImage(pet: "bunny")
    }
    @IBAction func dogPressed(_ sender: Any) {
        sendPetImage(pet: "dog")
    }
    
    @IBAction func catPressed(_ sender: Any) {
        sendPetImage(pet: "cat")
    }
    @IBAction func fishPressed(_ sender: Any) {
        sendPetImage(pet: "fish")
    }
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
